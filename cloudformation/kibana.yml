---
AWSTemplateFormatVersion: '2010-09-09'
Description: Kibana 5
Parameters:
  Stack:
    Description: Stack applied as a tag
    Type: String
  Account:
    Description: AWS Account for this account
    Type: String
  Organisation:
    Description: Organisation for this account
    Type: String
  ElasticEndpoint:
    Description: ElasticEndpoint URL
    Type: String
  KeyName:
    Default: bootstrap
    Description: Name of an existing EC2 KeyPair for SSH access
    Type: AWS::EC2::KeyPair::KeyName
  Stage:
    Description: Stage applied as a tag
    Type: String
    Default: PROD
    AllowedValues:
    - PROD
    - CODE
    - INFRA
    ConstraintDescription: must be a valid stage eg. PROD, CODE, INFRA
  ProxyServerEndpoint:
    Description: The proxy server url
    Type: String
  ProxyPort:
    Description: Proxy server service port
    Type: String
  ProxyExcludeList:
    Description: Proxy exclude list
    Type: String
  KibanaCapacity:
    Description: Autoscale Size
    Type: Number
    Default: '1'
    MinValue: 1
    MaxValue: 12
  KibanaInstanceType:
    Description: EC2 instance type for the Elasticsearch nodes
    Type: String
    Default: t2.medium
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10clarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - c3.large
      - c3.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - c3.8xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - r3.large
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - i2.xlarge
      - i2.2xlarge
      - i2.4xlarge
      - i2.8xlarge
      - d2.xlarge
      - d2.2xlarge
      - d2.4xlarge
      - d2.8xlarge
      - hi1.4xlarge
      - hs1.8xlarge
      - cr1.8xlarge
      - cc2.8xlarge
  VpcId:
    Description: ID of the VPC onto which to launch the application eg. vpc-1234abcd
    Type: AWS::EC2::VPC::Id
  PublicVpcSubnetA:
    Description: Subnets to use in VPC for public ELB eg. subnet-abcd1234
    Type: String
  PublicVpcSubnetB:
    Description: Subnets to use in VPC for public ELB eg. subnet-abcd1234
    Type: String
  PrivateVpcSubnetA:
    Description: Subnets to use in VPC for instances eg. subnet-abcd1234
    Type: String
  PrivateVpcSubnetB:
    Description: Subnets to use in VPC for instances eg. subnet-abcd1234
    Type: String
  VpcIpRangeCidr:
    Description: VPC IP range eg. 10.0.0.0/8
    Type: String
    Default: 0.0.0.0/0
  AllowedSshCidr:
    Description: IP range to allow SSH access from eg. 1.2.3.4/21
    Type: String
    Default: 0.0.0.0/0
  AllowedHttpCidr:
    Description: IP range to allow HTTP access from eg. 1.2.3.4/21
    Type: String
    Default: 0.0.0.0/0
  HostedZoneName:
    Description: Route53 Hosted Zone in which kibana aliases will be created (without
      the trailing dot). Leave blank for no ALIAS.
    Type: String
    AllowedPattern: "^(.*[^.]|)$"
  KibanaEBSVolumeSize:
    Description: EBS storage to be attached to each instance (in GB). Set to zero
      for no attached EBS volume (the on-instance storage will be used instead).
    Type: Number
    Default: 0
    MaxValue: 1000
    MinValue: 0
  PublicLoadBalancerSSLCertificateARN:
    Description: ARN of the SSL certificate applied to the public load balancer
    Type: String
    Default: ''
  InstanceProfile:
    Description: Instance Profile for Elastic Search Launch configuration
    Type: String

Conditions:
  HasDNS: !Not [!Equals [!Ref HostedZoneName,  '']]
  UseEBS: !Not [!Equals [!Ref KibanaEBSVolumeSize,  '0']]
  HasSSLCertificate: !Not [!Equals [!Ref PublicLoadBalancerSSLCertificateARN,  '']]

Mappings:
    RegionMap:
        us-east-1:
            ImageId: ami-6edd3078
        us-west-2:
            ImageId: ami-7c803d1c
        us-west-1:
            ImageId: ami-539ac933
        eu-west-1:
            ImageId: ami-d8f4deab
        eu-central-1:
            ImageId: ami-5aee2235
        ap-southeast-1:
            ImageId: ami-b1943fd2
        ap-northeast-1:
            ImageId: ami-eb49358c
        ap-southeast-2:
            ImageId: ami-fe71759d
        sa-east-1:
            ImageId: ami-7379e31f
        cn-north-1:
            ImageId: ami-b2a97edf
    InstanceMap:
        t2.medium:
            ESHeapSize: 2g
        m4.large:
            ESHeapSize: 4g
        m4.xlarge:
            ESHeapSize: 8g
        m4.2xlarge:
            ESHeapSize: 15g
    AWSInstanceType2Arch:
        t2.micro:
            Arch: HVM64
        t2.small:
            Arch: HVM64
        t2.medium:
            Arch: HVM64
        t2.large:
            Arch: HVM64
        m4.large:
            Arch: HVM64
        m4.xlarge:
            Arch: HVM64
        m4.2xlarge:
            Arch: HVM64
        m4.4xlarge:
            Arch: HVM64
        m4.10xlarge:
            Arch: HVM64
        m3.medium:
            Arch: HVM64
        m3.large:
            Arch: HVM64
        m3.xlarge:
            Arch: HVM64
        m3.2xlarge:
            Arch: HVM64
        c3.large:
            Arch: HVM64
        c3.xlarge:
            Arch: HVM64
        c3.2xlarge:
            Arch: HVM64
        c3.4xlarge:
            Arch: HVM64
        c3.8xlarge:
            Arch: HVM64
        c4.large:
            Arch: HVM64
        c4.xlarge:
            Arch: HVM64
        c4.2xlarge:
            Arch: HVM64
        c4.4xlarge:
            Arch: HVM64
        c4.8xlarge:
            Arch: HVM64
        r3.large:
            Arch: HVM64
        r3.xlarge:
            Arch: HVM64
        r3.2xlarge:
            Arch: HVM64
        r3.4xlarge:
            Arch: HVM64
        r3.8xlarge:
            Arch: HVM64
        i2.xlarge:
            Arch: HVM64
        i2.2xlarge:
            Arch: HVM64
        i2.4xlarge:
            Arch: HVM64
        i2.8xlarge:
            Arch: HVM64
        d2.xlarge:
            Arch: HVM64
        d2.2xlarge:
            Arch: HVM64
        d2.4xlarge:
            Arch: HVM64
        d2.8xlarge:
            Arch: HVM64
        hi1.4xlarge:
            Arch: HVM64
        hs1.8xlarge:
            Arch: HVM64
        cr1.8xlarge:
            Arch: HVM64
        cc2.8xlarge:
            Arch: HVM64
    AWSRegionArch2AMI:
        us-east-1:
            PV64: ami-1ccae774
            HVM64: ami-1ecae776
            HVMG2: ami-8c6b40e4
        us-west-2:
            PV64: ami-ff527ecf
            HVM64: ami-e7527ed7
            HVMG2: ami-abbe919b
        us-west-1:
            PV64: ami-d514f291
            HVM64: ami-d114f295
            HVMG2: ami-f31ffeb7
        eu-west-1:
            PV64: ami-bf0897c8
            HVM64: ami-a10897d6
            HVMG2: ami-d5bc24a2
        eu-central-1:
            PV64: ami-ac221fb1
            HVM64: ami-a8221fb5
            HVMG2: ami-7cd2ef61
        ap-northeast-1:
            PV64: ami-27f90e27
            HVM64: ami-cbf90ecb
            HVMG2: ami-6318e863
        ap-southeast-1:
            PV64: ami-acd9e8fe
            HVM64: ami-68d8e93a
            HVMG2: ami-3807376a
        ap-southeast-2:
            PV64: ami-ff9cecc5
            HVM64: ami-fd9cecc7
            HVMG2: ami-89790ab3
        sa-east-1:
            PV64: ami-bb2890a6
            HVM64: ami-b52890a8
            HVMG2: NOT_SUPPORTED
        cn-north-1:
            PV64: ami-fa39abc3
            HVM64: ami-f239abcb
            HVMG2: NOT_SUPPORTED

Resources:
  KibanaPublicLoadBalancer:
      Type: AWS::ElasticLoadBalancing::LoadBalancer
      Properties:
          CrossZone: true
          Scheme: internal
          Listeners:
          - Protocol:
              Fn::If:
              - HasSSLCertificate
              - HTTPS
              - HTTP
            LoadBalancerPort:
              Fn::If:
              - HasSSLCertificate
              - '443'
              - '80'
            InstanceProtocol: HTTP
            InstancePort: '80'
            SSLCertificateId:
               Fn::If:
               - HasSSLCertificate
               - !Ref PublicLoadBalancerSSLCertificateARN
               - !Ref AWS::NoValue

          HealthCheck:
            Target: HTTP:80/
            Timeout: '10'
            Interval: '20'
            UnhealthyThreshold: '10'
            HealthyThreshold: '2'
          Subnets: [!Ref PublicVpcSubnetA, !Ref PublicVpcSubnetB]
          SecurityGroups:
          - !Ref KibanaPublicLoadBalancerSecurityGroup
  KibanaInternalLoadBalancer:
      Type: AWS::ElasticLoadBalancing::LoadBalancer
      Properties:
          Scheme: internal
          CrossZone: true
          Listeners:
          - Protocol: TCP
            LoadBalancerPort: '80'
            InstancePort: '80'
          HealthCheck:
            Target: HTTP:80/
            Timeout: '10'
            Interval: '20'
            UnhealthyThreshold: '10'
            HealthyThreshold: '2'
          Subnets: [!Ref PrivateVpcSubnetA, !Ref PrivateVpcSubnetB]
          SecurityGroups:
          - !Ref KibanaInternalLoadBalancerSecurityGroup
  KibanaAutoscalingGroup:
      Type: AWS::AutoScaling::AutoScalingGroup
      Properties:
          VPCZoneIdentifier:
          - !Ref PrivateVpcSubnetA
          - !Ref PrivateVpcSubnetB
          LaunchConfigurationName: !Ref KibanaLaunchConfig
          MinSize: '1'
          MaxSize: '2'
          DesiredCapacity: !Ref KibanaCapacity
          HealthCheckType: EC2
          HealthCheckGracePeriod: 600
          LoadBalancerNames:
          - !Ref KibanaPublicLoadBalancer
          - !Ref KibanaInternalLoadBalancer
          Tags:
          - Key: Stage
            Value:
              !Ref Stage
            PropagateAtLaunch: 'true'
          - Key: Stack
            Value:
              !Ref Stack
            PropagateAtLaunch: 'true'
          - Key: App
            Value: kibana
            PropagateAtLaunch: 'true'
          - Key: Name
            Value: kibana
            PropagateAtLaunch: 'true'

  KibanaLaunchConfig:
      Type: AWS::AutoScaling::LaunchConfiguration
      Properties:
          ImageId: !FindInMap
            - AWSRegionArch2AMI
            - !Ref 'AWS::Region'
            - !FindInMap
              - AWSInstanceType2Arch
              - !Ref KibanaInstanceType
              - Arch
          SecurityGroups:
          - !Ref KibanaSecurityGroup
          - "sg-dfdab8ba"
          InstanceType: !Ref KibanaInstanceType
          BlockDeviceMappings:
          - Fn::If:
            - UseEBS
            - DeviceName: "/dev/sdk"
              Ebs:
                VolumeSize: !Ref KibanaEBSVolumeSize
                VolumeType: gp2
            - !Ref AWS::NoValue
          IamInstanceProfile: !Ref InstanceProfile
          KeyName: !Ref KeyName
          UserData:
            Fn::Base64: !Sub
            - |
              #!/bin/bash -ev
              cat >/etc/profile.d/proxy.sh <<EOL
              export http_proxy=http://${ProxyServerEndpoint}:${ProxyPort};
              export https_proxy=http://${ProxyServerEndpoint}:${ProxyPort};
              export no_proxy=${ProxyExcludeList};
              export AWS_ORG=${Organisation}
              export AWS_ACCOUNT_NAME=${Account}
              export AWS_ACCOUNT_ID=${AWS::AccountId}
              export AWS_STACK_NAME=${AWS::StackName}
              export AWS_STACK_ID=${AWS::StackId}
              export AWS_REGION=${AWS::Region}
              export AWS_VPC_ID=${VpcId}
              EOL

              chmod 644 /etc/profile.d/proxy.sh
              source /etc/profile.d/proxy.sh

              yum update -y aws-cfn-bootstrap
              yum update -y aws-cli
              yum install -y java-1.8.0
              yum remove -y java-1.7.0-openjdk

              # Update repositories
              rpm --import https://packages.elastic.co/GPG-KEY-elasticsearch
              cat >/etc/yum.repos.d/elastic.repo <<EOL
              [elastic-5.x]
              name=Elastic repository for 5.x packages
              baseurl=https://artifacts.elastic.co/packages/5.x/yum
              gpgcheck=1
              gpgkey=https://artifacts.elastic.co/GPG-KEY-elasticsearch
              enabled=1
              autorefresh=1
              type=rpm-md
              EOL


              # Install prerequesites
              yum -y update && yum -y install  ntp unzip libwww-perl libdatetime-perl

              # Install Logstash, Elasticsearch, Kibana, etc...
              yum -y update && yum -y install kibana nginx nodejs npm


              # Mount Volume
              ${MountVolume}
              chown -R kibana:  /opt/kibana

              # Setup free disk space monitoring
              curl http://aws-cloudwatch.s3.amazonaws.com/downloads/CloudWatchMonitoringScripts-1.2.1.zip -O
              unzip CloudWatchMonitoringScripts-1.2.1.zip -d /usr/local/bin
              rm CloudWatchMonitoringScripts-1.2.1.zip
              echo '*/30 * * * * root /usr/local/bin/aws-scripts-mon/mon-put-instance-data.pl --disk-space-util --disk-path=/opt/kibana --from-cron' >/etc/cron.d/monitor-instance


              # Install Kibana plugins
              #wget -O /tmp/x-pack-5.5.0.zip https://artifacts.elastic.co/downloads/kibana-plugins/x-pack/x-pack-5.5.0.zip
              #/usr/share/kibana/bin/kibana-plugin install file:///tmp/x-pack-5.5.0.zip -d /usr/share/kibana/plugins

              # Configure Kibana
              cat >/etc/kibana/kibana.yml << EOF
              xpack.security.enabled: false
              server.port: 8080
              server.host: 0.0.0.0
              elasticsearch.url: ${ElasticEndpoint}
              elasticsearch.requestTimeout: 60000
              logging.quiet: true
              EOF

              chown -R kibana: /usr/share/kibana

              aws s3 cp s3://${Organisation}-${Account}-aem/elk/config/nginx/nginx-kibana.conf /etc/nginx/nginx.conf

              # Start services
              aws s3 cp s3://${Organisation}-${Account}-aem/elk/config/kibana/systemd-kibana.service /etc/systemd/system/kibana.service

              chkconfig kibana --add
              chkconfig kibana on

              service  kibana start
              service nginx start

            - ESHeapSize: 2g
              MountVolume: !If
                - UseEBS
                - !Sub |
                    mkfs.ext4 /dev/xvdk
                    mkdir /opt/kibana
                    mount /dev/xvdk /opt/kibana
                    echo '/dev/xvdk /opt/kibana ext4 defaults 0 2' > /etc/fstab
                - !Sub |
                    mkdir -p /opt/kibana
                    #mount /dev/xvda1 /kibana


  KibanaPublicLoadBalancerSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
          VpcId: !Ref VpcId
          GroupDescription: Allow access to kibana on public ELB from internet
          SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort:
              Fn::If:
              - HasSSLCertificate
              - '443'
              - '80'
            ToPort:
              Fn::If:
              - HasSSLCertificate
              - '443'
              - '80'
            CidrIp: !Ref AllowedHttpCidr
          SecurityGroupEgress:
          - IpProtocol: tcp
            FromPort: '80'
            ToPort: '80'
            CidrIp: 0.0.0.0/0
  KibanaInternalLoadBalancerSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
          VpcId: !Ref VpcId
          GroupDescription: Allow logstash messages to internal ELB
          SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: '80'
            ToPort: '80'
            CidrIp: !Ref VpcIpRangeCidr
          SecurityGroupEgress:
          - IpProtocol: tcp
            FromPort: '0'
            ToPort: '65535'
            CidrIp: !Ref VpcIpRangeCidr
  KibanaSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
          GroupDescription: Allow kibana from public and logstash from internal ELBs
          VpcId: !Ref VpcId
          SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: '80'
            ToPort: '80'
            SourceSecurityGroupId: !Ref KibanaInternalLoadBalancerSecurityGroup
          - IpProtocol: tcp
            FromPort: '80'
            ToPort: '80'
            SourceSecurityGroupId: !Ref KibanaPublicLoadBalancerSecurityGroup
          - IpProtocol: tcp
            FromPort: '22'
            ToPort: '22'
            CidrIp: !Ref AllowedSshCidr

  KibanaAlias:
      Type: AWS::Route53::RecordSetGroup
      Condition: HasDNS
      Properties:
          HostedZoneName: !Sub '${HostedZoneName}.'
          Comment: Alias to kibana elb
          RecordSets:
          - Name: !Sub 'kibana.${HostedZoneName}'
            Type: A
            AliasTarget:
                HostedZoneId: !GetAtt KibanaPublicLoadBalancer.CanonicalHostedZoneNameID
                DNSName: !GetAtt KibanaPublicLoadBalancer.DNSName
Outputs:
    KibanaURL:
        Value: !Join [ '', [ 'http://', !GetAtt KibanaPublicLoadBalancer.DNSName, '/' ]]
        Description: URL for the Kibana 4 Dashboard
