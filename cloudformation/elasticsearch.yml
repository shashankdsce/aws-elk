---
AWSTemplateFormatVersion: '2010-09-09'
Description: ELK Stack - Elasticsearch
Parameters:
  Stack:
    Description: Stack applied as a tag
    Type: String

  NodeMaster:
    Description: NodeMaster for elastic
    Type: String

  NodeData:
    Description: NodeData for elastic
    Type: String

  Account:
    Description: AWS Account for this account
    Type: String
  Organisation:
    Description: Organisation for this account
    Type: String
  KeyName:
    Default: bootstrap
    Description: Name of an existing EC2 KeyPair for SSH access
    Type: AWS::EC2::KeyPair::KeyName
  Stage:
    Description: Stage applied as a tag
    Type: String
    Default: PROD
    AllowedValues:
    - PROD
    - CODE
    - INFRA
    ConstraintDescription: must be a valid stage eg. PROD, CODE, INFRA
  ProxyServerEndpoint:
    Description: The proxy server url
    Type: String
  ProxyPort:
    Description: Proxy server service port
    Type: String
  ProxyExcludeList:
    Description: Proxy exclude list
    Type: String
  MonitorStack:
    Description: >-
      Push logs from Elasticsearch, Nginx, KCL and CloudFormation to CloudWatch
      Logs
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
  ElkCapacity:
    Description: Autoscale Size
    Type: Number
    Default: '1'
    MinValue: 1
    MaxValue: 12
  InstanceType:
    Description: EC2 instance type for the Elasticsearch nodes
    Type: String
    Default: t2.medium
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10clarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - c3.large
      - c3.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - c3.8xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - r3.large
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - i2.xlarge
      - i2.2xlarge
      - i2.4xlarge
      - i2.8xlarge
      - d2.xlarge
      - d2.2xlarge
      - d2.4xlarge
      - d2.8xlarge
      - hi1.4xlarge
      - hs1.8xlarge
      - cr1.8xlarge
      - cc2.8xlarge
  VpcId:
    Description: ID of the VPC onto which to launch the application eg. vpc-1234abcd
    Type: AWS::EC2::VPC::Id
  PrivateVpcSubnetA:
    Description: Subnets to use in VPC for instances eg. subnet-abcd1234
    Type: String
  PrivateVpcSubnetB:
    Description: Subnets to use in VPC for instances eg. subnet-abcd1234
    Type: String
  VpcIpRangeCidr:
    Description: VPC IP range eg. 10.0.0.0/8
    Type: String
    Default: 0.0.0.0/0
  AllowedSshCidr:
    Description: IP range to allow SSH access from eg. 1.2.3.4/21
    Type: String
    Default: 0.0.0.0/0
  AllowedHttpCidr:
    Description: IP range to allow HTTP access from eg. 1.2.3.4/21
    Type: String
    Default: 0.0.0.0/0
  HostedZoneName:
    Description: Route53 Hosted Zone in which kibana aliases will be created (without
      the trailing dot). Leave blank for no ALIAS.
    Type: String
    AllowedPattern: "^(.*[^.]|)$"
  EBSVolumeSize:
    Description: EBS storage to be attached to each instance (in GB). Set to zero
      for no attached EBS volume (the on-instance storage will be used instead).
    Type: Number
    Default: 0
    MaxValue: 1000
    MinValue: 0

  SnapshotRepository:
    Description: S3 bucket name for elasticsearch snapshots repository
    Type: String
  IndexKeepDays:
    Description: Keep elasticsearch indices for x number of days
    Type: Number
    Default: '8'
  PublicLoadBalancerSSLCertificateARN:
    Description: ARN of the SSL certificate applied to the public load balancer
    Type: String
    Default: ''
  InstanceProfile:
    Description: Instance Profile for Elastic Search Launch configuration
    Type: String

Conditions:
  HasDNS: !Not [!Equals [!Ref HostedZoneName,  '']]
  UseEBS: !Not [!Equals [!Ref EBSVolumeSize,  '0']]
  HasS3: !Not [!Equals [!Ref SnapshotRepository,  '']]
  HasSSLCertificate: !Not [!Equals [!Ref PublicLoadBalancerSSLCertificateARN,  '']]
  CreateCWLForStack: !Equals
      - !Ref MonitorStack
      - 'true'

Mappings:
  Constants:
    S3DownloadPath:
      Value: aws-cloudwatch/downloads/cloudwatch-logs-subscription-consumer
    S3DownloadFile:
      Value: cloudwatch-logs-subscription-consumer-1.2.0
  RegionMap:
    us-east-1:
      ImageId: ami-6edd3078
    us-west-2:
      ImageId: ami-7c803d1c
    us-west-1:
      ImageId: ami-539ac933
    eu-west-1:
      ImageId: ami-d8f4deab
    eu-central-1:
      ImageId: ami-5aee2235
    ap-southeast-1:
      ImageId: ami-b1943fd2
    ap-northeast-1:
      ImageId: ami-eb49358c
    ap-southeast-2:
      ImageId: ami-fe71759d
    sa-east-1:
      ImageId: ami-7379e31f
    cn-north-1:
      ImageId: ami-b2a97edf
  InstanceMap:
    t2.medium:
      ESHeapSize: 2g
    m4.large:
      ESHeapSize: 4g
    m4.xlarge:
      ESHeapSize: 8g
    m4.2xlarge:
      ESHeapSize: 15g
  AWSInstanceType2Arch:
    t2.micro:
      Arch: HVM64
    t2.small:
      Arch: HVM64
    t2.medium:
      Arch: HVM64
    t2.large:
      Arch: HVM64
    m4.large:
      Arch: HVM64
    m4.xlarge:
      Arch: HVM64
    m4.2xlarge:
      Arch: HVM64
    m4.4xlarge:
      Arch: HVM64
    m4.10xlarge:
      Arch: HVM64
    m3.medium:
      Arch: HVM64
    m3.large:
      Arch: HVM64
    m3.xlarge:
      Arch: HVM64
    m3.2xlarge:
      Arch: HVM64
    c3.large:
      Arch: HVM64
    c3.xlarge:
      Arch: HVM64
    c3.2xlarge:
      Arch: HVM64
    c3.4xlarge:
      Arch: HVM64
    c3.8xlarge:
      Arch: HVM64
    c4.large:
      Arch: HVM64
    c4.xlarge:
      Arch: HVM64
    c4.2xlarge:
      Arch: HVM64
    c4.4xlarge:
      Arch: HVM64
    c4.8xlarge:
      Arch: HVM64
    r3.large:
      Arch: HVM64
    r3.xlarge:
      Arch: HVM64
    r3.2xlarge:
      Arch: HVM64
    r3.4xlarge:
      Arch: HVM64
    r3.8xlarge:
      Arch: HVM64
    i2.xlarge:
      Arch: HVM64
    i2.2xlarge:
      Arch: HVM64
    i2.4xlarge:
      Arch: HVM64
    i2.8xlarge:
      Arch: HVM64
    d2.xlarge:
      Arch: HVM64
    d2.2xlarge:
      Arch: HVM64
    d2.4xlarge:
      Arch: HVM64
    d2.8xlarge:
      Arch: HVM64
    hi1.4xlarge:
      Arch: HVM64
    hs1.8xlarge:
      Arch: HVM64
    cr1.8xlarge:
      Arch: HVM64
    cc2.8xlarge:
      Arch: HVM64
  AWSRegionArch2AMI:
    us-east-1:
      PV64: ami-1ccae774
      HVM64: ami-1ecae776
      HVMG2: ami-8c6b40e4
    us-west-2:
      PV64: ami-ff527ecf
      HVM64: ami-e7527ed7
      HVMG2: ami-abbe919b
    us-west-1:
      PV64: ami-d514f291
      HVM64: ami-d114f295
      HVMG2: ami-f31ffeb7
    eu-west-1:
      PV64: ami-bf0897c8
      HVM64: ami-a10897d6
      HVMG2: ami-d5bc24a2
    eu-central-1:
      PV64: ami-ac221fb1
      HVM64: ami-a8221fb5
      HVMG2: ami-7cd2ef61
    ap-northeast-1:
      PV64: ami-27f90e27
      HVM64: ami-cbf90ecb
      HVMG2: ami-6318e863
    ap-southeast-1:
      PV64: ami-acd9e8fe
      HVM64: ami-68d8e93a
      HVMG2: ami-3807376a
    ap-southeast-2:
      PV64: ami-ff9cecc5
      HVM64: ami-fd9cecc7
      HVMG2: ami-89790ab3
    sa-east-1:
      PV64: ami-bb2890a6
      HVM64: ami-b52890a8
      HVMG2: NOT_SUPPORTED
    cn-north-1:
      PV64: ami-fa39abc3
      HVM64: ami-f239abcb
      HVMG2: NOT_SUPPORTED

Resources:

  ElkInternalLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      Scheme: internal
      CrossZone: true
      Listeners:
      - Protocol: TCP
        LoadBalancerPort: '80'
        InstancePort: '80'
      HealthCheck:
        Target: HTTP:80/elasticsearch
        Timeout: '10'
        Interval: '20'
        UnhealthyThreshold: '10'
        HealthyThreshold: '2'
      Subnets: [!Ref PrivateVpcSubnetA , !Ref PrivateVpcSubnetB]
      SecurityGroups:
      - !Ref ElkInternalLoadBalancerSecurityGroup
  ElkAutoscalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - !Ref PrivateVpcSubnetA
      - !Ref PrivateVpcSubnetB
      LaunchConfigurationName: !Ref ElkLaunchConfig
      MinSize: '1'
      MaxSize: '12'
      DesiredCapacity: !Ref ElkCapacity
      HealthCheckType: EC2
      HealthCheckGracePeriod: 600
      LoadBalancerNames:
      - !Ref ElkInternalLoadBalancer
      Tags:
      - Key: Stage
        Value:
          !Ref Stage
        PropagateAtLaunch: 'true'
      - Key: Stack
        Value:
          !Ref Stack
        PropagateAtLaunch: 'true'
      - Key: App
        Value:
          !Ref Stack
        PropagateAtLaunch: 'true'
      - Key: Name
        Value: ElasticSearch
        PropagateAtLaunch: 'true'

  ElkLaunchConfig:
      Type: AWS::AutoScaling::LaunchConfiguration
      Properties:
        ImageId: !FindInMap
          - AWSRegionArch2AMI
          - !Ref 'AWS::Region'
          - !FindInMap
            - AWSInstanceType2Arch
            - !Ref InstanceType
            - Arch
        SecurityGroups:
        - !Ref ElkSecurityGroup
        - "sg-dfdab8ba"
        InstanceType: !Ref InstanceType
        BlockDeviceMappings:
        - Fn::If:
          - UseEBS
          - DeviceName: "/dev/sdk"
            Ebs:
              VolumeSize: !Ref EBSVolumeSize
              VolumeType: gp2
          - !Ref AWS::NoValue
        IamInstanceProfile: !Ref InstanceProfile
        KeyName: !Ref KeyName
        UserData:
          Fn::Base64: !Sub
          - |
            #!/bin/bash -ev
            cat >/etc/profile.d/proxy.sh <<EOL
            export http_proxy=http://${ProxyServerEndpoint}:${ProxyPort}
            export https_proxy=http://${ProxyServerEndpoint}:${ProxyPort}
            export no_proxy=${ProxyExcludeList}
            export AWS_ORG=${Organisation}
            export AWS_ACCOUNT_NAME=${Account}
            export AWS_ACCOUNT_ID=${AWS::AccountId}
            export AWS_STACK_NAME=${AWS::StackName}
            export AWS_STACK_ID=${AWS::StackId}
            export AWS_REGION=${AWS::Region}
            export AWS_VPC_ID=${VpcId}
            export ES_JAVA_OPTS=-"DproxyHost=${ProxyServerEndpoint} -DproxyPort=${ProxyPort} -Xms${ESHeapSize} -Xmx${ESHeapSize}"
            export HTTP_PROXY=http://${ProxyServerEndpoint}:${ProxyPort};
            export HTTPS_PROXY=http://${ProxyServerEndpoint}:${ProxyPort};
            export NO_PROXY=${ProxyExcludeList};
            EOL

            chmod 644 /etc/profile.d/proxy.sh
            source /etc/profile.d/proxy.sh

            yum update -y aws-cfn-bootstrap
            yum update -y aws-cli
            yum install -y java-1.8.0
            yum remove -y java-1.7.0-openjdk

            # Update repositories
            rpm --import https://packages.elastic.co/GPG-KEY-elasticsearch
            cat >/etc/yum.repos.d/elastic.repo <<EOL
            [elastic-5.x]
            name=Elastic repository for 5.x packages
            baseurl=https://artifacts.elastic.co/packages/5.x/yum
            gpgcheck=1
            gpgkey=https://artifacts.elastic.co/GPG-KEY-elasticsearch
            enabled=1
            autorefresh=1
            type=rpm-md
            EOL


            # Install prerequesites
            yum -y update && yum -y install  ntp unzip libwww-perl libdatetime-perl

            # Install Elasticsearch, etc...
            yum -y update && yum -y install elasticsearch  nginx  elasticsearch-curator nodejs npm

            # Configure system
            cat >/etc/security/limits.conf << EOF
            elasticsearch - nofile  65536
            elasticsearch - memlock unlimited
            EOF

            # Mount Volume
            ${MountVolume}
            chown -R elasticsearch:  /opt/elasticsearch

            # Setup free disk space monitoring
            curl http://aws-cloudwatch.s3.amazonaws.com/downloads/CloudWatchMonitoringScripts-1.2.1.zip -O
            unzip CloudWatchMonitoringScripts-1.2.1.zip -d /usr/local/bin
            rm CloudWatchMonitoringScripts-1.2.1.zip
            echo '*/30 * * * * root /usr/local/bin/aws-scripts-mon/mon-put-instance-data.pl --disk-space-util --disk-path=/opt/elasticsearch --from-cron' >/etc/cron.d/monitor-instance

            # Install ES plugins
            export ES_JAVA_OPTS="-DproxyHost=${ProxyServerEndpoint} -DproxyPort=${ProxyPort} -Xms${ESHeapSize} -Xmx${ESHeapSize}"

            ##/usr/share/elasticsearch/bin/elasticsearch-plugin  install x-pack --batch

            #/usr/share/elasticsearch/bin/elasticsearch-plugin  install discovery-ec2 --batch
            #/usr/share/elasticsearch/bin/elasticsearch-plugin   install repository-s3 --batch


            aws s3 cp s3://${Organisation}-${Account}-aem/elk/config/elasticsearch/discovery-ec2-5.5.0.zip /tmp/discovery-ec2-5.5.0.zip
            /usr/share/elasticsearch/bin/elasticsearch-plugin  install file:///tmp/discovery-ec2-5.5.0.zip --batch
            aws s3 cp s3://${Organisation}-${Account}-aem/elk/config/elasticsearch/repository-s3-5.5.0.zip /tmp/repository-s3-5.5.0.zip
            /usr/share/elasticsearch/bin/elasticsearch-plugin  install file:///tmp/repository-s3-5.5.0.zip --batch

            # Configure Elasticsearch
            echo 'ES_JAVA_OPTS="-DproxyHost=${ProxyServerEndpoint} -DproxyPort=${ProxyPort} -Xms${ESHeapSize} -Xmx${ESHeapSize}"' >> /etc/default/elasticsearch
            echo 'ES_JAVA_OPTS="-Xms${ESHeapSize} -Xmx${ESHeapSize}"' >> /etc/sysconfig/elasticsearch
            echo '-Xms${ESHeapSize} -Xmx${ESHeapSize}' >> /etc/elasticsearch/jvm.options
            echo 'MAX_LOCKED_MEMORY=unlimited' >> /etc/sysconfig/elasticsearch

            aws s3 cp s3://${Organisation}-${Account}-aem/elk/config/elasticsearch/elasticsearch.yml /etc/elasticsearch/elasticsearch.yml

            #wget -O /etc/elasticsearch/elasticsearch.yml https://raw.githubusercontent.com/guardian/elk-stack/master/config/elasticsearch.yml

            sed -i \
              -e 's,@@REGION,${AWS::Region},g' \
              -e 's,@@STACK,${Stack},g' \
              -e 's,@@HOST,${ElkHost},g' \
              -e 's,@@PROXYHOST,${ProxyServerEndpoint},g' \
              -e 's,@@PROXYPORT,${ProxyPort},g' \
              -e 's,@@NODEMASTER,${NodeMaster},g' \
              -e 's,@@NODEDATA,${NodeData},g' \
              -e 's,@@App,${Stack},g' \
              -e 's,path.data: /data,path.data: /opt/elasticsearch,g' \
              /etc/elasticsearch/elasticsearch.yml


            #Install Cerebro for system status
            wget -O /tmp/cerebro-0.6.5.zip https://github.com/lmenezes/cerebro/releases/download/v0.6.5/cerebro-0.6.5.zip
            unzip /tmp/cerebro-0.6.5.zip -d /usr/share/
            ln -s /usr/share/cerebro-0.6.5/bin/cerebro /usr/bin/cerebro
            cerebro &

            aws s3 cp s3://${Organisation}-${Account}-aem/elk/config/nginx/nginx-elasticsearch.conf /etc/nginx/nginx.conf

            # Start services


            chkconfig elasticsearch --add
            chkconfig elasticsearch on



            service  elasticsearch start
            service nginx start


            while ! nc -z localhost 9200; do sleep 5; done; echo Elasticsearch is up!
            #Install Dummy Dashboard
            yum install -y metricbeat
            /usr/share/metricbeat/scripts/import_dashboards -es http://127.0.0.1:9200
            yum install -y packetbeat
            /usr/share/packetbeat/scripts/import_dashboards -es http://127.0.0.1:9200
            #yum install -y heartbeat
            #/usr/share/heartbeat/scripts/import_dashboards -es http://127.0.0.1:9200
            yum install -y filebeat
            /usr/share/filebeat/scripts/import_dashboards -es http://127.0.0.1:9200



            # Setup S3 snapshot
            ${SetupS3Snapshot}
            # Setup schedule to delete old indexes
            mkdir /etc/curator
            wget -O /etc/curator/curator.yml https://raw.githubusercontent.com/guardian/elk-stack/master/config/curator/curator.yml

            wget -O /etc/curator/delete-old-indexes.yml https://raw.githubusercontent.com/guardian/elk-stack/master/config/curator/delete-old-indexes.yml
            sed -i \
              -e 's,@@NUMBER_OF_DAYS,${IndexKeepDays},g' \
              /etc/curator/delete-old-indexes.yml
            echo '30 0 * * * root /usr/bin/curator --config /etc/curator/curator.yml /etc/curator/delete-old-indexes.yml' >/etc/cron.d/curator
          - ESHeapSize: 2g
            MountVolume: !If
              - UseEBS
              - !Sub |
                  mkfs.ext4 /dev/xvdk
                  mkdir /opt/elasticsearch
                  mount /dev/xvdk /opt/elasticsearch
                  echo '/dev/xvdk /opt/elasticsearch ext4 defaults 0 2' > /etc/fstab
              - !Sub |
                  mkdir -p /opt/elasticsearch
                  #mount /dev/xvda1 /data
            ElkHost: !Join [ '', [ 'http', !GetAtt ElkInternalLoadBalancer.DNSName, '/elasticsearch' ]]
            SetupS3Snapshot: !If
              - HasS3
              - !Sub |
                  while ! nc -z localhost 9200; do sleep 5; done; echo Elasticsearch is up!
                  cat >/tmp/s3_connector.json << EOF
                      {
                             "type": "s3",
                              "settings": {
                                "bucket": "${SnapshotRepository}",
                                "region": "ap-southeast-2"
                              }
                      }
                  EOF
                  curl -XPUT 'http://localhost:9200/_snapshot/s3' -d @/tmp/s3_connector.json

                  curl 'http://localhost:9200/_snapshot/s3?pretty'
                  wget -O /usr/local/bin/backup.sh https://raw.githubusercontent.com/guardian/elk-stack/master/scripts/backup.sh
                  chmod +x /usr/local/bin/backup.sh
                  echo '15 0 * * * root /usr/local/bin/backup.sh' >/etc/cron.d/backup
              - ''
  ElkInternalLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VpcId
      GroupDescription: Allow logstash messages to internal ELB
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: !Ref VpcIpRangeCidr
      - IpProtocol: tcp
        FromPort: '9200'
        ToPort: '9200'
        CidrIp: !Ref VpcIpRangeCidr
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: '0'
        ToPort: '65535'
        CidrIp: !Ref VpcIpRangeCidr
  ElkSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow elastic search access from all environments and logstash from internal ELBs
      VpcId: !Ref VpcId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        SourceSecurityGroupId: !Ref ElkInternalLoadBalancerSecurityGroup
      - IpProtocol: tcp
        FromPort: '9200'
        ToPort: '9400'
        SourceSecurityGroupId: !Ref ElkInternalLoadBalancerSecurityGroup
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: !Ref AllowedSshCidr
  ElkSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt ElkSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: '9200'
      ToPort: '9400'
      SourceSecurityGroupId: !GetAtt ElkSecurityGroup.GroupId
Outputs:
    ElasticEndpoint:
        Value: !Join [ '', [ 'http://', !GetAtt ElkInternalLoadBalancer.DNSName, ':80' ]]
        Description: Logging endpoint for Logstash TCP input
