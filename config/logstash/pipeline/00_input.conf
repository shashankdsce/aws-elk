input {
  beats {
    port => 5000
  }

  cloudwatch {
    namespace => "AWS/EC2"
    metrics => [ "CPUUtilization", "CPUCreditBalance", "CPUCreditUsage", "DiskReadBytes", "DiskReadOps", "DiskWriteBytes", "DiskWriteOps", "NetworkIn", "NetworkOut", "NetworkPacketsIn", "NetworkPacketsOut","StatusCheckFailed", "StatusCheckFailed_Instance", "StatusCheckFailed_System" ]
    filters => { "tag:Monitoring" => "Yes" }
    region => "ap-southeast-2"
    type => "cloudwatch-metric"
    interval => "300"
  }

  cloudwatch {
    namespace => "AWS/EBS"
    metrics => ["VolumeQueueLength"]
    filters => { "tag:Monitoring" => "Yes" }
    region => "ap-southeast-2"
    type => "cloudwatch-metric"
    interval => "300"
  }
}


filter {
  if [fields][log_type] == "apache-access" {
    grok {
      match => {
        "message" => '%{IPORHOST:elbip} %{USER:ident} %{USER:auth} \[%{HTTPDATE:timestamp}\] "(?:%{WORD:verb} %{NOTSPACE:request}(?: HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})" %{NUMBER:response} (?:%{NUMBER:bytes}|-) %{QS:referrer} %{QS:agent} %{GREEDYDATA:sometext} "%{USER:ident}" "%{USER:ident}" "%{USER:ident}" "%{GREEDYDATA:anyIP}" "%{IPORHOST:clientip}"'
      }
    }

    if !("_grokparsefailure" in [tags]) {

      date {
        match => [ "timestamp", "dd/MMM/yyyy:HH:mm:ss Z" ]
        target => "@timestamp"
        timezone => "Australia/Sydney"
        locale => "en"
        #
      }

      mutate {
        convert => [ "bytes", "integer"]
        convert => [ "response", "integer"]
      }



      geoip {
        source => "clientip"
        # target => "geoip"
        # add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
        # add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
      }

      useragent {
        source => "agent"
        target => "useragent"
      }
    }

  }

  if [fields][log_type] == "cq-error" {
    mutate {
      gsub => [
        "message", "\r", ""
      ]
    }
    grok {
      match => {"message" => "%{URIHOST:date} %{HAPROXYTIME:time} \*%{LOGLEVEL:level}\* \[%{DATA:thread}\] %{DATA:category} %{GREEDYDATA:msg}"}
      add_field => ["logtime", "%{date}:%{time}"]
    }
    date {
      match => ["logtime", "dd.MM.yyyy HH:mm:ss.SSS"]
    }
  }

  if [fields][log_type] == "project-spring-error" {
    mutate {
      gsub => [
        "message", "\r", ""
      ]
    }
    grok {
      match => {"message" => "%{URIHOST:date} %{HAPROXYTIME:time} \*%{LOGLEVEL:level}\* \[%{DATA:thread}\] %{DATA:category} %{GREEDYDATA:msg}"}
      add_field => ["logtime", "%{date}:%{time}"]
    }
    date {
      match => ["logtime", "dd.MM.yyyy HH:mm:ss.SSS"]
    }
  }
}

